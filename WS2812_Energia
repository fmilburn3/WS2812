/*
 * WS2812 display using SPI on various TI LaunchPads with Energia
 * See writeup at http://forum.43oh.com/topic/10011-using-spi-and-energia-with-ws2812-leds/
 *
 * Connections:
 *   LaunchPad      LED Strip
 *   ---------      ---------
 *   3V3            5VDC
 *   Pin 15 (MOSI)  DIN
 *   GND            GND
 *
 * How to use:
 *  ledsetup ();         - Get ready to send.
 *                         Call once at the beginning of the program.
 *  sendPixel (r, g, b); - Send a single pixel to the string.
 *                         Call this once for each pixel in a frame.
 *                         Each colour is in the range 0 to 255. Turn off 
 *                         interrupts before use and turn on after all pixels
 *                         have been programmed.
 *  show ();             - Latch the recently sent pixels onto the LEDs .
 *                         Call once per frame.
 *  showColor (count, r, g, b); - Set the entire string of count Neopixels
 *                         to this one colour. Turn off interrupts before use
 *                         and remember to turn on afterwards.
 *
 * Derived from NeoPixel display library by Nick Gammon
 * https://github.com/nickgammon/NeoPixels_SPI
 * With ideas from:
 * http://wp.josh.com/2014/05/13/ws2812-neopixels-are-not-so-finicky-once-you-get-to-know-them/
 * Released for public use under the Creative Commons Attribution 3.0 Australia License
 * http://creativecommons.org/licenses/by/3.0/au/
 *
 * F Milburn  November 2016
 * Tested with Energia V17 and WS2812 8 pixel strip on launchpads shown below.
 */
#include <SPI.h>

#if defined(__MSP430G2553)
  #define SPIDIV     SPI_CLOCK_DIV2       // 16 MHz/2 gives 125 ns for each on bit in byte
  #define SPILONG    0b11111100           // 750 ns (acceptable "on" range 550 to 850 ns)
  #define SPISHORT   0b11100000           // 375 ns (acceptable "on" range 200 to 500 ns)
#elif defined(__MSP430F5529)
  #define SPIDIV     SPI_CLOCK_DIV4       // 25.6 MHz/4 gives 156.25 ns for each on bit in byte
  #define SPILONG    0b11110000           // 625 ns (acceptable "on" range 550 to 850 ns)
  #define SPISHORT   0b11000000           // 312.5 ns (acceptable "on" range 200 to 500 ns)
#else
  #error This microcontroller is not supported
#endif

const unsigned int PIXELS = 8;           // Pixels in the strip

void setup (){
  ledsetup();
} 

void loop (){
  // Show a solid color across the strip
  noInterrupts();                        // no interrupts while sending data
  showColor (PIXELS, 0xBB, 0x22, 0x22);  // single color on entire strip
  interrupts();                          // interrupts are OK now
  delay(1000);                           // hold it for a second
  
  // Show a different color on every pixel
  noInterrupts();                        // no interrupts while sending data
  sendPixel(0xBB, 0x00, 0x00);           // red
  sendPixel(0x00, 0xBB, 0x00);           // green
  sendPixel(0x00, 0x00, 0xBB);           // blue
  sendPixel(0xBB, 0xBB, 0xBB);           // white
  sendPixel(0xBB, 0x22, 0x22);           // pinkish
  sendPixel(0x22, 0xBB, 0x22);           // light green
  sendPixel(0x22, 0x22, 0xBB);           // purplish blue
  sendPixel(0x00, 0x00, 0x00);           // pixel off
  interrupts();                          // interrupts are OK now
  delay(1000);                           // hold it for a second                      
} 
 
// Sends one byte to the LED strip by SPI.
void sendByte (unsigned char b){
    for (unsigned char bit = 0; bit < 8; bit++){
      if (b & 0x80) // is high-order bit set?
        SPI.transfer (SPILONG);     // long on bit (~700 ns) defined for each clock speed
      else
        SPI.transfer (SPISHORT);    // short on bit (~350 ns) defined for each clock speed
      b <<= 1;                      // shift next bit into high-order position
    } // end of for each bit
} // end of sendByte

// Set up SPI
void ledsetup(){
  SPI.begin ();
  SPI.setClockDivider (SPIDIV);  // defined for each clock speed
  SPI.setBitOrder (MSBFIRST);
  SPI.setDataMode (SPI_MODE1);   // MOSI normally low.
  show ();                       // in case MOSI went high, latch in whatever-we-sent
  sendPixel (0, 0, 0);           // now change back to black
  show ();                       // and latch that
}  // end of ledsetup

// Send a single pixel worth of information.  Turn interrupts off while using.
void sendPixel (unsigned char r, unsigned char g, unsigned char b){
  sendByte (g);        // NeoPixel wants colors in green-then-red-then-blue order
  sendByte (r);
  sendByte (b);
} // end of sendPixel

// Wait long enough without sending any bits to allow the pixels to latch and
// display the last sent frame
void show(){
  delayMicroseconds (9);
} // end of show

// Display a single color on the whole string.  Turn interrupts off while using.
void showColor (unsigned int count, unsigned char r , unsigned char g , unsigned char b){
  noInterrupts ();
  for (unsigned int pixel = 0; pixel < count; pixel++)
    sendPixel (r, g, b);
  interrupts ();
  show ();  // latch the colours
} // end of showColor
